{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asriva40\\\\OneDrive - Aricent Technologies (Holdings) Ltd\\\\Desktop\\\\Fashion Ecom\\\\Task\\\\src\\\\store\\\\CartProvider.js\",\n  _s = $RefreshSig$();\nimport React, { useReducer } from 'react'; // Importing React and the useReducer hook\n\nimport CartContext from './cart-context'; // Importing the CartContext to use its structure\n\n//  Action & Reducer & Middleware\n\n// Default state of the cart\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  // Array to store items in the cart\n  totalAmount: 0 // Total cost of all items in the cart\n};\n\n// Reducer function to handle cart state updates based on dispatched actions\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    // Handle adding an item to the cart\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id // Find index of the existing item\n    );\n\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n    if (existingCartItem) {\n      // If the item already exists in the cart\n      const updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount // Update its quantity\n      };\n\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem; // Replace with the updated item\n    } else {\n      // If the item does not exist in the cart\n      updatedItems = state.items.concat(action.item); // Add the new item\n    }\n\n    return {\n      // Return the updated state\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n  if (action.type === 'REMOVE') {\n    // Handle removing an item from the cart\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.id // Find index of the item to remove\n    );\n\n    const existingItem = state.items[existingCartItemIndex];\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    let updatedItems;\n    if (existingItem.amount === 1) {\n      // If the item quantity is 1, remove it completely\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      // Otherwise, reduce its quantity by 1\n      const updatedItem = {\n        ...existingItem,\n        amount: existingItem.amount - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n    return {\n      // Return the updated state\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n  if (action.type === 'CLEAR') {\n    // Handle clearing the entire cart\n    return defaultCartState; // Reset to the default state\n  }\n\n  return defaultCartState; // Fallback to default state if action is unrecognized\n};\n\n// \n// The CartProvider component provides cart state and functionality to other components\nconst CartProvider = props => {\n  _s();\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  // Dispatch actions for adding an item to the cart\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  // Dispatch actions for removing an item from the cart\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  // Dispatch actions for clearing the cart\n  const clearCartHandler = () => {\n    dispatchCartAction({\n      type: 'CLEAR'\n    });\n  };\n\n  // Context value to be provided to consumers\n  const cartContext = {\n    items: cartState.items,\n    // Current items in the cart\n    totalAmount: cartState.totalAmount,\n    // Total cost of the cart\n    addItem: addItemToCartHandler,\n    // Function to add an item\n    removeItem: removeItemFromCartHandler,\n    // Function to remove an item\n    clearCart: clearCartHandler // Function to clear the cart\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: [props.children, \" // Render child components wrapped by the provider\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n_c = CartProvider;\nexport default CartProvider; // Exporting the CartProvider for use in other components\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","useReducer","CartContext","jsxDEV","_jsxDEV","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","existingItem","filter","CartProvider","props","_s","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","clearCartHandler","cartContext","addItem","removeItem","clearCart","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/asriva40/OneDrive - Aricent Technologies (Holdings) Ltd/Desktop/Fashion Ecom/Task/src/store/CartProvider.js"],"sourcesContent":["import React, { useReducer } from 'react'; // Importing React and the useReducer hook\r\n\r\nimport CartContext from './cart-context'; // Importing the CartContext to use its structure\r\n\r\n\r\n//  Action & Reducer & Middleware\r\n\r\n// Default state of the cart\r\nconst defaultCartState = {\r\n    items: [],          // Array to store items in the cart\r\n    totalAmount: 0      // Total cost of all items in the cart\r\n};\r\n\r\n// Reducer function to handle cart state updates based on dispatched actions\r\nconst cartReducer = (state, action) => {\r\n    if(action.type === 'ADD'){ // Handle adding an item to the cart\r\n        const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\r\n\r\n        const existingCartItemIndex = state.items.findIndex(\r\n            (item)=> item.id === action.item.id // Find index of the existing item\r\n        );\r\n\r\n        const existingCartItem = state.items[existingCartItemIndex];\r\n        let updatedItems;\r\n        \r\n        if(existingCartItem){ // If the item already exists in the cart\r\n            const updatedItem = {\r\n                ...existingCartItem, \r\n                amount: existingCartItem.amount + action.item.amount // Update its quantity\r\n            };\r\n            updatedItems = [...state.items];\r\n            updatedItems[existingCartItemIndex] = updatedItem; // Replace with the updated item\r\n        } else { // If the item does not exist in the cart\r\n            updatedItems = state.items.concat(action.item); // Add the new item\r\n        }\r\n\r\n        return { // Return the updated state\r\n            items: updatedItems,\r\n            totalAmount: updatedTotalAmount\r\n        };\r\n    }\r\n\r\n    if(action.type === 'REMOVE') { // Handle removing an item from the cart\r\n        const existingCartItemIndex = state.items.findIndex(\r\n            (item) => item.id === action.id // Find index of the item to remove\r\n        );\r\n        const existingItem = state.items[existingCartItemIndex];\r\n        const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n        let updatedItems;\r\n\r\n        if(existingItem.amount === 1) { // If the item quantity is 1, remove it completely\r\n            updatedItems = state.items.filter(item => item.id !== action.id );\r\n        } else { // Otherwise, reduce its quantity by 1\r\n            const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\r\n            updatedItems = [...state.items];\r\n            updatedItems[existingCartItemIndex] = updatedItem;\r\n        }\r\n\r\n        return { // Return the updated state\r\n            items: updatedItems,\r\n            totalAmount: updatedTotalAmount\r\n        };\r\n    }\r\n\r\n    if(action.type === 'CLEAR') { // Handle clearing the entire cart\r\n        return defaultCartState; // Reset to the default state\r\n    }\r\n\r\n    return defaultCartState; // Fallback to default state if action is unrecognized\r\n};\r\n\r\n\r\n// \r\n// The CartProvider component provides cart state and functionality to other components\r\nconst CartProvider = props => {\r\n    const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\r\n\r\n    // Dispatch actions for adding an item to the cart\r\n    const addItemToCartHandler = (item) => {\r\n        dispatchCartAction({type: 'ADD', item: item});\r\n    };\r\n\r\n    // Dispatch actions for removing an item from the cart\r\n    const removeItemFromCartHandler = (id) => {\r\n        dispatchCartAction({type: 'REMOVE', id: id});\r\n    };\r\n\r\n    // Dispatch actions for clearing the cart\r\n    const clearCartHandler = () => {\r\n        dispatchCartAction({type: 'CLEAR'});\r\n    }\r\n\r\n    // Context value to be provided to consumers\r\n    const cartContext = {\r\n        items: cartState.items,                 // Current items in the cart\r\n        totalAmount: cartState.totalAmount,     // Total cost of the cart\r\n        addItem: addItemToCartHandler,          // Function to add an item\r\n        removeItem: removeItemFromCartHandler,  // Function to remove an item\r\n        clearCart: clearCartHandler             // Function to clear the cart\r\n    }\r\n    return(\r\n        <CartContext.Provider value = { cartContext } >\r\n            {props.children} // Render child components wrapped by the provider\r\n        </CartContext.Provider>\r\n    );\r\n};\r\n\r\nexport default CartProvider; // Exporting the CartProvider for use in other components\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}